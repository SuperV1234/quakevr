/*
Copyright (C) 1996-2001 Id Software, Inc.
Copyright (C) 2002-2009 John Fitzgibbons and others
Copyright (C) 2010-2014 QuakeSpasm developers
Copyright (C) 2020-2021 Vittorio Romeo

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
*/

#pragma once

#include <GL/glew.h>

#include "quakedef_macros.hpp"
#include "gl_model.hpp"
#include "srcformat.hpp"

// gl_texmgr.h -- fitzquake's texture manager. manages opengl texture images

#define TEXPREF_NONE 0x0000
#define TEXPREF_MIPMAP 0x0001 // generate mipmaps
// TEXPREF_NEAREST and TEXPREF_LINEAR aren't supposed to be ORed with TEX_MIPMAP
#define TEXPREF_LINEAR 0x0002     // force linear
#define TEXPREF_NEAREST 0x0004    // force nearest
#define TEXPREF_ALPHA 0x0008      // allow alpha
#define TEXPREF_PAD 0x0010        // allow padding
#define TEXPREF_PERSIST 0x0020    // never free
#define TEXPREF_OVERWRITE 0x0040  // overwrite existing same-name texture
#define TEXPREF_NOPICMIP 0x0080   // always load full-sized
#define TEXPREF_FULLBRIGHT 0x0100 // use fullbright mask palette
#define TEXPREF_NOBRIGHT 0x0200   // use nobright mask palette
#define TEXPREF_CONCHARS 0x0400   // use conchars palette
#define TEXPREF_WARPIMAGE \
    0x0800 // resize this texture when warpimagesize changes
#define TEXPREF_PREMULTIPLY 0x1000 // rgb = rgb*a; a=a;

extern bool gl_texture_s3tc, gl_texture_rgtc, gl_texture_bptc, gl_texture_etc2,
    gl_texture_astc;

typedef uintptr_t src_offset_t;

struct gltexture_t
{
    // managed by texture manager
    GLuint texnum;
    gltexture_t* next;
    qmodel_t* owner;
    // managed by image loading
    char name[64];
    unsigned int width;  // size of image as it exists in opengl
    unsigned int height; // size of image as it exists in opengl
    unsigned int flags;
    char source_file[MAX_QPATH]; // relative filepath to data source, or "" if
                                 // source is in memory
    src_offset_t source_offset;  // byte offset into file, or memory address
    srcformat
        source_format; // format of pixel data (indexed, lightmap, or rgba)
    unsigned int source_width;  // size of image in source data
    unsigned int source_height; // size of image in source data
    unsigned short source_crc;  // generated by source data before modifications
    signed char shirt;          // 0-13 shirt color, or -1 if never colormapped
    signed char pants;          // 0-13 pants color, or -1 if never colormapped
    // used for rendering
    int visframe; // matches r_framecount if texture was bound this frame
};

extern gltexture_t* notexture;
extern gltexture_t* nulltexture;

extern unsigned int d_8to24table[256];
extern unsigned int d_8to24table_fbright[256];
extern unsigned int d_8to24table_nobright[256];
extern unsigned int d_8to24table_conchars[256];
extern unsigned int d_8to24table_shirt[256];
extern unsigned int d_8to24table_pants[256];

// TEXTURE MANAGER

[[nodiscard]] float TexMgr_FrameUsage();
[[nodiscard]] gltexture_t* TexMgr_FindTexture(
    qmodel_t* owner, const char* name);
[[nodiscard]] gltexture_t* TexMgr_NewTexture();
void TexMgr_FreeTexture(gltexture_t* kill);
void TexMgr_FreeTextures(unsigned int flags, unsigned int mask);
void TexMgr_FreeTexturesForOwner(qmodel_t* owner);
void TexMgr_NewGame();
void TexMgr_Init();
void TexMgr_DeleteTextureObjects();
[[nodiscard]] srcformat TexMgr_FormatForCode(
    const char* code); // returns SRC_EXTERNAL when not known.
[[nodiscard]] srcformat TexMgr_FormatForName(
    const char* name); // returns SRC_EXTERNAL when not known.
[[nodiscard]] size_t TexMgr_ImageSize(int width, int height, srcformat format);
void TexMgr_BlockSize(srcformat format, int* bytes, int* width, int* height);

// IMAGE LOADING
[[nodiscard]] gltexture_t* TexMgr_LoadImage(qmodel_t* owner, const char* name,
    int width, int height, srcformat format, byte* data,
    const char* source_file, src_offset_t source_offset, unsigned flags);
void TexMgr_ReloadImage(gltexture_t* glt, int shirt, int pants);
void TexMgr_ReloadImages();
void TexMgr_ReloadNobrightImages();

[[nodiscard]] int TexMgr_Pad(int s);
[[nodiscard]] int TexMgr_SafeTextureSize(int s);
[[nodiscard]] int TexMgr_PadConditional(int s);

// TEXTURE BINDING & TEXTURE UNIT SWITCHING

void GL_SelectTexture(GLenum target);
void GL_DisableMultitexture(); // selects texture unit 0
void GL_EnableMultitexture();  // selects texture unit 1
void GL_Bind(gltexture_t* texture);
void GL_ClearBindings();
